import imp
import glob
import os

from fsqa.phabricator_vref import PhabricatorVREF


CHECKERS = dict()


def load_checkers():
    readability_dir = os.path.dirname(__file__)
    for module in glob.glob(os.path.join(readability_dir, "*.py")):
        if "__init__" in module:
            continue
        language, _ = os.path.splitext(os.path.basename(module))
        m = imp.load_module(language, *imp.find_module(language, [readability_dir]))
        try:
            CHECKERS[language] = m.__getattribute__(language.title() + 'Checker')
        except AttributeError:
            print '{language}Checker not found in {path}'.format(language=language.title(),
                    path=module)


class Readability(PhabricatorVREF):
    CHECK_FAIL_MESSAGE = '''
    File {filename} in
    {commit_hash}
    needs LGTM from someone with {language} readability!
    Get one of these people to review it:
    {readability}
    '''

    VREF = 'VREF/READABILITY'

    def check(self):
        "Returns False if a file has not been accepted by someone with readability in its language"
        for commit_hash in self.commit_hashes:
            files_in_commit = self.get_files_in_commit(commit_hash)
            accepted_by = self.commit_to_acceptors[commit_hash] | set([self.gl_user])

            for f in files_in_commit:
                for language, checker_class, in CHECKERS.items():
                    # should meet readability conditions at last commit, aka newsha
                    file_contents = self.read_git_file(f, commit=self.newsha)
                    checker = checker_class(f, file_contents)
                    accepting_users = accepted_by

                    if checker() and not checker.accepted(accepting_users):
                        self.fail(filename=f, commit_hash=commit_hash, language=language,
                                readability=checker.readability)
                        return False

        return True


class ReadabilityChecker(object):
    readability = []

    def __init__(self, file_path, file_contents):
        self.file_path = file_path
        self.file_contents = file_contents

    def __call__(self):
        "Return True if file requires readability review"
        _, extension = os.path.splitext(self.file_path)

        return extension == self.expected_extension

    def accepted(self, accepted_by):
        "Return True if at least one of the accepting users has readability"
        with_readability = set([user.strip('*') for user in self.readability])

        return True if set(accepted_by) & with_readability else False


if __name__ == '__main__':
    import sys

    load_checkers()

    oldsha, newsha, repo_path = sys.argv[1:4]
    Readability(oldsha, newsha, repo_path).check()
