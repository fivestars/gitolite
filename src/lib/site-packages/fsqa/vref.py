import os

from git import Repo, GitCommandError


class VREF(object):
    "Base class for VREF with push information like commit hashes and repository"

    def __init__(self, oldsha, newsha, repo_path):
        self.gl_user = os.environ["GL_USER"]

        self.oldsha = oldsha
        self.newsha = newsha
        self.repo = Repo(repo_path)

        self.commit_hashes = self.get_all_commits(oldsha, newsha)

    def fail(self, **kwargs):
        "Prints failure message and VREF failure triggering text"
        print self.CHECK_FAIL_MESSAGE.format(**kwargs)
        print self.VREF

    def get_files_in_commit(self, commit_hash):
        "Returns a list of file paths which are been modified by the commit"
        return self.repo.git.show("--pretty=format:", "--name-only", commit_hash).split()

    def read_git_file(self, path, commit="HEAD"):
        "Returns text in a file at a given commit"
        try:
            return self.repo.git.cat_file("-p", commit + ":" + path)
        except GitCommandError:
            pass

    def get_all_commits(self, oldsha, newsha):
        """Collect all the commits between two commits, from oldsha -> newsha

        includes newsha but does not include oldsha
        """
        if oldsha == "0" * 40:
            return self.repo.git.log("--pretty=%H", newsha).split()
        else:
            return self.repo.git.log("--pretty=%H",
                "{oldsha}..{newsha}".format(oldsha=oldsha, newsha=newsha)).split()

    def commit_exists(self, commit_hash):
        """Takes a commit hash and returns True if the commit exists, False otherwise"""
        try:
            self.repo.git.branch("--contains", commit_hash)
            return True
        except GitCommandError:
            return False
