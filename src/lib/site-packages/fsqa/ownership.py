import os

from phabricator_vref import PhabricatorVREF


class Ownership(PhabricatorVREF):
    CHECK_FAIL_MESSAGE = """
    You lose.
    Diff for {filename} in commit {commit_hash}
    did not receive a LGTM from a code owner.
    Have one of these guys review your code and try again :(
    {code_owners}
    """

    VREF = "VREF/OWNERSHIP"

    def check(self):
        "Returns False if a modified file has not been accepted by a code owner on Phabricator"
        for commit_hash in self.commit_hashes:
            files_in_commit = self.get_files_in_commit(commit_hash)
            accepted_by = self.commit_to_acceptors[commit_hash] | set([self.gl_user])

            for f in files_in_commit:
                code_owners = self.get_owners(f)
                if code_owners is None:
                    print "    WARNING: No .owners file found for file %s" % f
                    continue

                if not code_owners:
                    print "    No owner for file %s" % f
                    return False

                overlap = accepted_by & code_owners
                proportion = len(overlap) / float(len(code_owners))

                if os.path.basename(f) == ".owners" and proportion < (2./3):
                    print "    Editing a .owners file requires 2/3 of current owners to approve"
                    self.fail(filename=f, commit_hash=commit_hash,
                            code_owners=list(code_owners))
                    return False

                elif not overlap:
                    self.fail(filename=f, commit_hash=commit_hash,
                            code_owners=list(code_owners))
                    return False

        return True

    def get_owners(self, path):
        """Crawls up git tree until it finds a .owners file

        Path is relative to top project dir
        Returns None if no .owners file is found
        """
        parent_dir = os.path.dirname(path)

        owners_file = self.read_git_file(os.path.join(parent_dir, ".owners"), commit=self.oldsha)

        if owners_file:
            lines = owners_file.split()
            return set(l.strip() for l in lines if l.strip() and not l.startswith("#"))

        if not parent_dir:
            return None

        return self.get_owners(parent_dir)


if __name__ == "__main__":
    import sys
    oldsha, newsha, repo_path = sys.argv[1:4]
    Ownership(oldsha, newsha, repo_path).check()
