from collections import defaultdict

from phabricator import Phabricator

from vref import VREF


class PhabricatorVREF(VREF):
    "VREF that uses Phabricator"
    p = Phabricator()

    def __init__(self, oldsha, newsha, repo_path):
        super(PhabricatorVREF, self).__init__(oldsha, newsha, repo_path)

        self.phid_to_user = dict((user["phid"], user["userName"]) for user in self.p.user.query())

        self.commit_to_acceptors = self.build_commit_to_acceptors_dict()

    def build_commit_to_acceptors_dict(self):
        "Return a dictionary of commit -> set of usernames that gave it a LGTM on Phabricator"
        diffs = self.p.differential.query(
                commitHashes=[["gtcm", sha] for sha in self.commit_hashes],
                status="status-open")

        revisions_involved = [diff["id"] for diff in diffs]
        revision_to_comments = self.p.differential.getrevisioncomments(ids=revisions_involved)

        commit_to_acceptors = defaultdict(set)

        for diff in diffs:
            revision_id = int(diff["id"])
            comments = revision_to_comments[str(revision_id)]

            accepted_by = [self.phid_to_user[cmt["authorPHID"]] for cmt in comments \
                                                                if self.comment_accepted(cmt)]

            commits_in_revision = [sha for hash_type, sha in diff["hashes"] if hash_type == "gtcm"]

            for commit in commits_in_revision:
                commit_to_acceptors[commit] = commit_to_acceptors[commit] | set(accepted_by)

        return commit_to_acceptors

    def comment_accepted(self, comment):
        "Take comment dict from phabricator and decide if its a LGTM"
        return "LGTM" in comment["content"]
