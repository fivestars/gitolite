from mock import patch
import os
import unittest

from test_tools import MagicPhabricatorVREF, users

# use MagicPhabricatorVREF to overwrite methods that use phabricator and git
with patch("fsqa.phabricator_vref.PhabricatorVREF", MagicPhabricatorVREF):
    from fsqa.ownership import Ownership
    from fsqa.readability import Readability, load_checkers, CHECKERS
    from fsqa.peer import Peer

    # overwrite get_owners, which is defined in the Ownership class
    Ownership.get_owners = MagicPhabricatorVREF.get_owners


@patch("fsqa.vref.Repo")
class TestOwnership(unittest.TestCase):
    """Before test, need to

    set GL_USER in environment

    Mock the GitPython calls with magic using dicts of:
    fake commit hash -> list of filenames modified in fake commit
    filenames -> list of codeowners for each file

    Mock the Phabricator results with magic using a dict of:
    fake revision id ->
        dict(commits -> list of commits in the review diff,
             lgtms -> list of users who posted a lgtm)

    To test readability (based on file extension),
    assign CHECKERS[language_name].readability to be a list of people with readability
    """

    def setUp(self):
        self.pushing_user = "kevin.yu"
        os.environ["GL_USER"] = self.pushing_user

        load_checkers()

        # Empty out readability lists so they have to be explicitly defined in each test
        for checker in CHECKERS.values():
            checker.readability = []

        MagicPhabricatorVREF.setup_users(users=users)

    def tearDown(self):
        del os.environ["GL_USER"]
        MagicPhabricatorVREF.reset()

    def test_works(self, mock_repo):
        mock_commit_dict = {"c95c850cec171776f14d632cee2b007d1332918e": ["moose.py", "cow.py"],
            "37251df883af71413e011f8ae88ffb847344f6dc": ["cow.py"],
            "da954d4beb74a8f43371028c2139cb1951a0f642": ["sloth.js"]}
        file_to_owner_dict = {"moose.py": ["charles"],
                                "cow.py": ["kilian"],
                              "sloth.js": [self.pushing_user]}
        revision_dict = {
            "1": {"commits": ["c95c850cec171776f14d632cee2b007d1332918e",
                              "37251df883af71413e011f8ae88ffb847344f6dc"],
                    "lgtms": ["charles", "kilian"]},
            "2": {"commits": ["da954d4beb74a8f43371028c2139cb1951a0f642"],
                    "lgtms": ["ram"]}
        }

        MagicPhabricatorVREF.setup_fake_git(mock_commit_dict=mock_commit_dict,
            file_to_owner_dict=file_to_owner_dict)
        MagicPhabricatorVREF.setup_fake_phabricator(revision_dict=revision_dict)

        CHECKERS["javascript"].readability = ["ram"]
        CHECKERS["python"].readability = ["kilian"]

        ownership_object = Ownership("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        peer_object = Peer("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        readability_object = Readability("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")

        assert readability_object.check() == True
        assert peer_object.check() == True
        assert ownership_object.check() == True

    def test_readability(self, mock_repo):
        "Test that no lgtm from someone with readability fails"
        mock_commit_dict = {"c95c850cec171776f14d632cee2b007d1332918e": ["sloth.js"]}
        file_to_owner_dict = {"sloth.js": [self.pushing_user]}
        revision_dict = {"1": {"commits": ["c95c850cec171776f14d632cee2b007d1332918e"],
                                 "lgtms": ["charles", "kilian"]}}

        MagicPhabricatorVREF.setup_fake_git(mock_commit_dict=mock_commit_dict,
            file_to_owner_dict=file_to_owner_dict)
        MagicPhabricatorVREF.setup_fake_phabricator(revision_dict=revision_dict)

        CHECKERS["javascript"].readability = ["ram"]

        ownership_object = Ownership("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        peer_object = Peer("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        readability_object = Readability("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")

        assert readability_object.check() == False

    def test_peer(self, mock_repo):
        """Test that not having a peer LGTM fails

        Not having lgtm from someone other than pusher
        (even if pusher has ownership and readablity) should fail
        """
        mock_commit_dict = {"c95c850cec171776f14d632cee2b007d1332918e": ["sloth.py"]}
        file_to_owner_dict = {"sloth.py": [self.pushing_user]}
        revision_dict = {"1": {"commits": ["c95c850cec171776f14d632cee2b007d1332918e"],
                                 "lgtms": []}}

        MagicPhabricatorVREF.setup_fake_git(mock_commit_dict=mock_commit_dict,
            file_to_owner_dict=file_to_owner_dict)
        MagicPhabricatorVREF.setup_fake_phabricator(revision_dict=revision_dict)

        CHECKERS["python"].readability = ["ram", self.pushing_user]

        ownership_object = Ownership("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        peer_object = Peer("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        readability_object = Readability("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")

        assert peer_object.check() == False

    def test_only_peer(self, mock_repo):
        "Test that if pusher has ownership and readability, can push with only one reviewer"
        mock_commit_dict = {"c95c850cec171776f14d632cee2b007d1332918e": ["moose.py", "cow.py"],
                            "37251df883af71413e011f8ae88ffb847344f6dc": ["cow.py"]}
        file_to_owner_dict = {"moose.py": [self.pushing_user],
                                "cow.py": [self.pushing_user]}
        revision_dict = {"1": {"commits": ["c95c850cec171776f14d632cee2b007d1332918e",
                                           "37251df883af71413e011f8ae88ffb847344f6dc"],
                                 "lgtms": ["random_dude"]}}

        MagicPhabricatorVREF.setup_fake_git(mock_commit_dict=mock_commit_dict,
            file_to_owner_dict=file_to_owner_dict)
        MagicPhabricatorVREF.setup_fake_phabricator(revision_dict=revision_dict)

        CHECKERS["python"].readability = [self.pushing_user]

        ownership_object = Ownership("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        peer_object = Peer("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        readability_object = Readability("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")

        assert peer_object.check() == True

    def test_ownership(self, mock_repo):
        "Test that no LGTM from code owner fails"
        mock_commit_dict = {"c95c850cec171776f14d632cee2b007d1332918e": ["moose.py", "cow.py"],
            "37251df883af71413e011f8ae88ffb847344f6dc": ["cow.py"],
            "da954d4beb74a8f43371028c2139cb1951a0f642": ["sloth.js"]}
        file_to_owner_dict = {"moose.py": ["charles"],
                                "cow.py": ["kilian"],
                              "sloth.js": [self.pushing_user]}
        revision_dict = {
            "1": {"commits": ["c95c850cec171776f14d632cee2b007d1332918e",
                              "37251df883af71413e011f8ae88ffb847344f6dc"],
                    "lgtms": ["kilian"]},  # moose.py has no lgtm from charles
            "2": {"commits": ["da954d4beb74a8f43371028c2139cb1951a0f642"],
                    "lgtms": ["ram"]}
        }

        MagicPhabricatorVREF.setup_fake_git(mock_commit_dict=mock_commit_dict,
            file_to_owner_dict=file_to_owner_dict)
        MagicPhabricatorVREF.setup_fake_phabricator(revision_dict=revision_dict)

        CHECKERS["javascript"].readability = ["ram"]
        CHECKERS["python"].readability = ["kilian"]

        ownership_object = Ownership("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        peer_object = Peer("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        readability_object = Readability("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")

        assert ownership_object.check() == False

    def test_two_revisions_same_commit(self, mock_repo):
        "Test that LGTM's in separate phabricator reviews can apply to the same commit"
        mock_commit_dict = {"c95c850cec171776f14d632cee2b007d1332918e": ["moose.py", "cow.py"]}
        file_to_owner_dict = {"moose.py": ["charles"],
                                "cow.py": ["kilian"]}
        # have commit ok"ed by all code owners but split between two different reviews
        revision_dict = {
            "1": {"commits": ["c95c850cec171776f14d632cee2b007d1332918e"],
                    "lgtms": ["charles"]},
            "2": {"commits": ["c95c850cec171776f14d632cee2b007d1332918e"],
                    "lgtms": ["kilian"]}
        }

        MagicPhabricatorVREF.setup_fake_git(mock_commit_dict=mock_commit_dict,
            file_to_owner_dict=file_to_owner_dict)
        MagicPhabricatorVREF.setup_fake_phabricator(revision_dict=revision_dict)

        CHECKERS["python"].readability = [self.pushing_user]

        ownership_object = Ownership("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        peer_object = Peer("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        readability_object = Readability("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")

        assert readability_object.check() == True
        assert peer_object.check() == True
        assert ownership_object.check() == True

    def test_modify_owners_file_fail(self, mock_repo):
        "Test that modifying an owners file fails if not LGTMed by 2/3 of code owners"
        mock_commit_dict = {"c95c850cec171776f14d632cee2b007d1332918e": [".owners"]}
        file_to_owner_dict = {".owners": ["charles", "kilian", "ram", "random_dude"]}
        revision_dict = {
            "1": {"commits": ["c95c850cec171776f14d632cee2b007d1332918e"],
                    "lgtms": ["charles", "kilian"]}
        }

        MagicPhabricatorVREF.setup_fake_git(mock_commit_dict=mock_commit_dict,
            file_to_owner_dict=file_to_owner_dict)
        MagicPhabricatorVREF.setup_fake_phabricator(revision_dict=revision_dict)

        ownership_object = Ownership("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        peer_object = Peer("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        readability_object = Readability("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")

        assert ownership_object.check() == False

    def test_modify_owners_file_success(self, mock_repo):
        "Test that modifying an owners file succeeds if LGTMed by more than 2/3 of code owners"
        mock_commit_dict = {"c95c850cec171776f14d632cee2b007d1332918e": [".owners"]}
        file_to_owner_dict = {".owners": ["charles", "kilian", "ram", "random_dude"]}
        revision_dict = {
            "1": {"commits": ["c95c850cec171776f14d632cee2b007d1332918e"],
                    "lgtms": ["charles", "kilian", "ram"]}
        }

        MagicPhabricatorVREF.setup_fake_git(mock_commit_dict=mock_commit_dict,
            file_to_owner_dict=file_to_owner_dict)
        MagicPhabricatorVREF.setup_fake_phabricator(revision_dict=revision_dict)

        ownership_object = Ownership("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        peer_object = Peer("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        readability_object = Readability("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")

        assert ownership_object.check() == True

    def test_modify_readability_file_fail(self, mock_repo):
        "Test modifying a readability checker fails if not LGTMed by 2/3 of the readability admins"
        mock_commit_dict = {"c95c850cec171776f14d632cee2b007d1332918e": ["readability/python.py"]}
        file_to_owner_dict = {"readability/python.py": [self.pushing_user]}
        revision_dict = {
            "1": {"commits": ["c95c850cec171776f14d632cee2b007d1332918e"],
                    "lgtms": ["charles", "kilian"]}
        }

        MagicPhabricatorVREF.setup_fake_git(mock_commit_dict=mock_commit_dict,
            file_to_owner_dict=file_to_owner_dict)
        MagicPhabricatorVREF.setup_fake_phabricator(revision_dict=revision_dict)
        MagicPhabricatorVREF.file_contents["readability/python.py"] = CHECKERS["python"].read_checker_file()

        CHECKERS["python"].readability = ["charles*", "kilian*", "ram*", "random_dude*"]

        ownership_object = Ownership("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        peer_object = Peer("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        readability_object = Readability("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")

        assert readability_object.check() == False

    def test_modify_readability_file_success(self, mock_repo):
        "Test modifying a readability checker works if LGTMed by 2/3 of the readability admins"
        mock_commit_dict = {"c95c850cec171776f14d632cee2b007d1332918e": ["readability/python.py"]}
        file_to_owner_dict = {"readability/python.py": [self.pushing_user]}
        revision_dict = {
            "1": {"commits": ["c95c850cec171776f14d632cee2b007d1332918e"],
                    "lgtms": ["charles", "kilian", "ram"]}
        }

        MagicPhabricatorVREF.setup_fake_git(mock_commit_dict=mock_commit_dict,
            file_to_owner_dict=file_to_owner_dict)
        MagicPhabricatorVREF.setup_fake_phabricator(revision_dict=revision_dict)
        MagicPhabricatorVREF.file_contents["readability/python.py"] = CHECKERS["python"].read_checker_file()

        CHECKERS["python"].readability = ["charles*", "kilian*", "ram*", "random_dude*"]

        ownership_object = Ownership("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        peer_object = Peer("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        readability_object = Readability("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")

        assert readability_object.check() == True

    def test_modify_readability_admins(self, mock_repo):
        "Test modifying a readability checker only requires 2/3 of admins"
        mock_commit_dict = {"c95c850cec171776f14d632cee2b007d1332918e": ["readability/python.py"]}
        file_to_owner_dict = {"readability/python.py": [self.pushing_user]}
        revision_dict = {
            "1": {"commits": ["c95c850cec171776f14d632cee2b007d1332918e"],
                    "lgtms": ["charles"]}
        }

        MagicPhabricatorVREF.setup_fake_git(mock_commit_dict=mock_commit_dict,
            file_to_owner_dict=file_to_owner_dict)
        MagicPhabricatorVREF.setup_fake_phabricator(revision_dict=revision_dict)
        MagicPhabricatorVREF.file_contents["readability/python.py"] = CHECKERS["python"].read_checker_file()

        CHECKERS["python"].readability = ["charles*", "kilian", "ram", "random_dude"]

        ownership_object = Ownership("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        peer_object = Peer("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        readability_object = Readability("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")

        assert readability_object.check() == True

    def test_django_checker(self, mock_repo):
        "Test modifying a readability checker only requires 2/3 of admins"
        mock_commit_dict = {"c95c850cec171776f14d632cee2b007d1332918e": ["loyalty/core/models.py"]}
        file_to_owner_dict = {"loyalty/core/models.py": [self.pushing_user]}
        revision_dict = {
            "1": {"commits": ["c95c850cec171776f14d632cee2b007d1332918e"],
                    "lgtms": ["random_dude"]}
        }

        MagicPhabricatorVREF.setup_fake_git(mock_commit_dict=mock_commit_dict,
            file_to_owner_dict=file_to_owner_dict)
        MagicPhabricatorVREF.setup_fake_phabricator(revision_dict=revision_dict)
        MagicPhabricatorVREF.file_contents["loyalty/core/models.py"] = """
        import charles
        from django.db.models import Model

        if not charles.mom:
            pass
        """

        CHECKERS["django"].readability = ["charles*"]
        CHECKERS["python"].readability = ["random_dude"]

        ownership_object = Ownership("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        peer_object = Peer("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        readability_object = Readability("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")

        assert readability_object.check() == False

    def test_qt_checker(self, mock_repo):
        "Test modifying a readability checker only requires 2/3 of admins"
        mock_commit_dict = {"c95c850cec171776f14d632cee2b007d1332918e": ["qt_file.py"]}
        file_to_owner_dict = {"qt_file.py": [self.pushing_user]}
        revision_dict = {
            "1": {"commits": ["c95c850cec171776f14d632cee2b007d1332918e"],
                    "lgtms": ["random_dude"]}
        }

        MagicPhabricatorVREF.setup_fake_git(mock_commit_dict=mock_commit_dict,
            file_to_owner_dict=file_to_owner_dict)
        MagicPhabricatorVREF.setup_fake_phabricator(revision_dict=revision_dict)
        MagicPhabricatorVREF.file_contents["qt_file.py"] = """
        import charles
        import PySide

        if not charles.mom:
            pass
        """

        CHECKERS["qt"].readability = ["ram*"]
        CHECKERS["python"].readability = ["random_dude"]

        ownership_object = Ownership("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        peer_object = Peer("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")
        readability_object = Readability("mock", "c95c850cec171776f14d632cee2b007d1332918e", ".git")

        assert readability_object.check() == False


if __name__ == "__main__":
    unittest.main()
