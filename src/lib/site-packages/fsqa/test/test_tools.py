from mock import MagicMock

from fsqa.phabricator_vref import PhabricatorVREF


users = [{u"phid": u"PHID-USER-ekscjzb6zmq25kxjo4fw",
          u"userName": u"kilian"},
         {u"phid": u"PHID-USER-ihxclwb7f73tnexd6fw7",
          u"userName": u"ram"},
         {u"phid": u"PHID-USER-cwshqbfot5jboex65jvv",
          u"userName": u"charles"},
         {u"phid": u"PHID-USER-abcdefghijklmnopqrst",
          u"userName": u"random_dude"},
         {u"phid": u"PHID-USER-rllftnpchhuqayq27qck",
          u"userName": u"kevin.yu"}]


class MagicPhabricatorVREF(PhabricatorVREF):
    """Overwrite the methods that require GitPython to access the repo (for testing purposes)
    and mock the Phabricator calls too
    """

    p = MagicMock()

    file_contents = {}

    @classmethod
    def reset(cls):
        cls.file_contents = {}
        cls.p.user.query = MagicMock(side_effect=lambda: Exception(
            "Test not set up properly: Use setup_users method"))
        cls.p.differential.query = MagicMock(side_effect=lambda: Exception(
            "Test not set up properly: Use setup_fake_phabricator method"))
        cls.p.differential.getrevisioncomments = MagicMock(side_effect=lambda: Exception(
            "Test not set up properly: Use setup_fake_phabricator method"))
        cls.mock_commits = {}
        cls.file_to_owner_dict = {}
        cls.file_contents = {}

    @classmethod
    def setup_fake_git(cls, mock_commit_dict, file_to_owner_dict):
        """Set up information which the mock methods will use to return

        Takes two dictionarys:
        mock_commit_dict = dictionary of commit hash to list of files modified in the commit
        file_to_owner_dict = dictionary of file to list of gitolite users with code ownership

        Applies to
        """
        cls.mock_commits = mock_commit_dict
        cls.file_to_owner_dict = file_to_owner_dict

    def get_owners(self, path):
        return set(self.file_to_owner_dict[path])

    def get_files_in_commit(self, commit):
        return self.mock_commits[commit]

    def read_git_file(self, path, commit):
        try:
            return self.file_contents[path]
        except KeyError:
            if path in self.file_to_owner_dict:
                return "mock file contents"

            raise Exception("Test not set up properly; file {} has no owners".format(path))

    def get_all_commits(self, oldsha, newsha):
        return self.mock_commits.keys()

    @classmethod
    def setup_fake_phabricator(cls, revision_dict):
        """Set up information about reviews and LGTMs to mock phabricator queries

        revision_dict is a dictionary of dictionaries:
        phabricator revision id ->
            dict(commits=[list of commits posted in the review"s diff],
                 lgtms=[list of gitolite users who have given the diff a LGTM])
        """
        diffs = []
        comments = {}

        for rev_id in revision_dict:
            commit_hashes = revision_dict[rev_id]["commits"]
            rev_dict = {"hashes": [["gtcm", commit_hash] for commit_hash in commit_hashes],
                        "id": str(rev_id)}
            diffs.append(rev_dict)

            comments[rev_id] = [{"authorPHID": cls.user_to_phid[username], "content": "LGTM"} \
                    for username in revision_dict[rev_id]["lgtms"]]

        cls.p.differential.query = MagicMock(return_value=diffs)
        cls.p.differential.getrevisioncomments = MagicMock(return_value=comments)

    @classmethod
    def setup_users(cls, users):
        cls.p.user.query = MagicMock(return_value=users)
        cls.user_to_phid = dict((user["userName"], user["phid"]) for user in cls.p.user.query())
